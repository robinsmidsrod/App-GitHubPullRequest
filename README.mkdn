# NAME

App::GitHubPullRequest - Command-line tool to query GitHub pull requests

# VERSION

version 0.2.0

# SYNOPSIS

    $ git pr
    $ git pr list closed # not shown by default
    $ git pr show 7      # also includes comments
    $ git pr patch 7     # can be piped to colordiff if you like colors
    $ git pr checkout 7  # create upstream tracking branch pr/7
    $ git pr help

    $ git pr login       # Get access token for commands below
    $ git pr close 7
    $ git pr open 7
    $ git pr comment 7 'This is good stuff!'

# INSTALLATION

Install it by just typing in these few lines in your shell:

    $ curl -L http://cpanmin.us | perl - --self-upgrade
    $ cpanm App::GitHubPullRequest

The following external programs are required:

- [git(1)](http://man.he.net/man1/git)
- [curl(1)](http://man.he.net/man1/curl)
- [stty(1)](http://man.he.net/man1/stty)

# COMMANDS

## help

Displays some help.

## list \[<state>\]

Shows all pull requests in the given state. State can be either `open` or
`closed`.  The default state is `open`.  This is the default command if
none is specified.

## show <number>

Shows details about the specified pull request number. Also includes
comments.

## patch <number>

Shows the patch associated with the specified pull request number.

## checkout <number>

Checks out the specified pull request in a dedicated tracking branch.
If the remote repo is not already specified in your git config, it will be
added and the branch in question will be fetched.

## close <number>

Closes the specified pull request number. Be aware, you can't close a pull
request that has already been merged.  If you try to, you'll get an obscure
`Validation Failed` error message from the GitHub API.

## open <number>

Reopens the specified pull request number. Be aware, you can't reopen a pull
request that has already been merged or closed by the repo owner.  If you
try to, you'll get an obscure `Validation Failed` error message from the
GitHub API.

## comment <number> \[<text>\]

Creates a comment on the specified pull request with the specified text. If
text is not specified, an editor will be opened for you to type in the text.

If your `EDITOR` environment variable has been set, that editor is used to
edit the text.  If it has not been set, it will try to use the [editor(1)](http://man.he.net/man1/editor)
external program.  This is usually a symlink set up by your operating system
to the most recently installed text editor.

## login \[<user>\] \[<password>\]

Logs you in to GitHub and creates a new access token used instead of your
password.  If you don't specify either of the options, they are looked up in
your git config github section.  If none of those are found, you'll be
prompted for them.

# METHODS

## run(@args)

Calls any of the other listed public methods with specified arguments. This
is usually called automatically when you invoke [git-pr](http://search.cpan.org/perldoc?git-pr).

# DEBUGGING

Set the environment variable PRQ\_DEBUG to a non-zero value to see more
details, like each API command being executed.

If you want to interact with another GitHub repo than the one in your
current directory, set the environment variable GITHUB\_REPO to the name of
the repo in question. Example:

    GITHUB_REPO=robinsmidsrod/App-GitHubPullRequest git pr list

Be aware, that if that repo is a fork, the program will look for its parent.

# CAVEATS

If you don't authenticate with GitHub using the login command, it will use
unauthenticated API requests where possible, which has a rate-limit of 60
requests.  If you login first it should allow 5000 requests before you hit
the limit.

You must be standing in a directory that is a git dir and that directory must
have a remote that points to github.com for the tool to work.

# SEE ALSO

- [git-pr](http://search.cpan.org/perldoc?git-pr)
- [GitHub Pull Request documentation](https://help.github.com/articles/using-pull-requests)
- [GitHub Pull Request API documentation](http://developer.github.com/v3/pulls/)

# SEMANTIC VERSIONING

This module uses semantic versioning concepts from [http://semver.org/](http://semver.org/).

# SUPPORT

## Perldoc

You can find documentation for this module with the perldoc command.

    perldoc App::GitHubPullRequest

## Websites

The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.

- MetaCPAN

    A modern, open-source CPAN search engine, useful to view POD in HTML format.

    [http://metacpan.org/release/App-GitHubPullRequest](http://metacpan.org/release/App-GitHubPullRequest)

- Search CPAN

    The default CPAN search engine, useful to view POD in HTML format.

    [http://search.cpan.org/dist/App-GitHubPullRequest](http://search.cpan.org/dist/App-GitHubPullRequest)

- RT: CPAN's Bug Tracker

    The RT ( Request Tracker ) website is the default bug/issue tracking system for CPAN.

    [http://rt.cpan.org/NoAuth/Bugs.html?Dist=App-GitHubPullRequest](http://rt.cpan.org/NoAuth/Bugs.html?Dist=App-GitHubPullRequest)

- AnnoCPAN

    The AnnoCPAN is a website that allows community annotations of Perl module documentation.

    [http://annocpan.org/dist/App-GitHubPullRequest](http://annocpan.org/dist/App-GitHubPullRequest)

- CPAN Ratings

    The CPAN Ratings is a website that allows community ratings and reviews of Perl modules.

    [http://cpanratings.perl.org/d/App-GitHubPullRequest](http://cpanratings.perl.org/d/App-GitHubPullRequest)

- CPAN Forum

    The CPAN Forum is a web forum for discussing Perl modules.

    [http://cpanforum.com/dist/App-GitHubPullRequest](http://cpanforum.com/dist/App-GitHubPullRequest)

- CPANTS

    The CPANTS is a website that analyzes the Kwalitee ( code metrics ) of a distribution.

    [http://cpants.perl.org/dist/overview/App-GitHubPullRequest](http://cpants.perl.org/dist/overview/App-GitHubPullRequest)

- CPAN Testers

    The CPAN Testers is a network of smokers who run automated tests on uploaded CPAN distributions.

    [http://www.cpantesters.org/distro/A/App-GitHubPullRequest](http://www.cpantesters.org/distro/A/App-GitHubPullRequest)

- CPAN Testers Matrix

    The CPAN Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.

    [http://matrix.cpantesters.org/?dist=App-GitHubPullRequest](http://matrix.cpantesters.org/?dist=App-GitHubPullRequest)

- CPAN Testers Dependencies

    The CPAN Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.

    [http://deps.cpantesters.org/?module=App::GitHubPullRequest](http://deps.cpantesters.org/?module=App::GitHubPullRequest)

## Bugs / Feature Requests

Please report any bugs or feature requests by email to `bug-app-githubpullrequest at rt.cpan.org`, or through
the web interface at [http://rt.cpan.org/NoAuth/ReportBug.html?Queue=App-GitHubPullRequest](http://rt.cpan.org/NoAuth/ReportBug.html?Queue=App-GitHubPullRequest). You will be automatically notified of any
progress on the request by the system.

## Source Code

The code is open to the world, and available for you to hack on. Please feel free to browse it and play
with it, or whatever. If you want to contribute patches, please send me a diff or prod me to pull
from your repository :)

[http://github.com/robinsmidsrod/App-GitHubPullRequest](http://github.com/robinsmidsrod/App-GitHubPullRequest)

    git clone git://github.com/robinsmidsrod/App-GitHubPullRequest.git

# AUTHOR

Robin Smidsrød <robin@smidsrod.no>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by Robin Smidsrød.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
